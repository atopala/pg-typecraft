// File generated by pg-typecraft. Do not edit.
import postgres from "postgres";
import * as lib from "./pg-typed.js";

export interface IProduct {
   $pk: postgres.Helper<"product_pk">;
   $table: "product";
   $all: postgres.Helper<
      [
         "product.created_at",
         "product.modified_at",
         "product.product_id",
         "product.price",
         "product.discount",
         "product.is_available",
         "product.is_published",
         "product.label",
      ]
   >;

   /**
    * created_at timestamptz default now()
    */
   createdAt: postgres.Helper<"product.created_at">;

   /**
    * modified_at timestamptz default now()
    */
   modifiedAt: postgres.Helper<"product.modified_at">;

   /**
    * product_id uuid default gen_random_uuid()
    */
   productId: postgres.Helper<"product.product_id">;

   /**
    * price numeric
    */
   price: postgres.Helper<"product.price">;

   /**
    * discount numeric
    */
   discount: postgres.Helper<"product.discount">;

   /**
    * is_available bool default true
    */
   isAvailable: postgres.Helper<"product.is_available">;

   /**
    * is_published bool default false
    */
   isPublished: postgres.Helper<"product.is_published">;

   /**
    * label varchar
    */
   label: postgres.Helper<"product.label">;
   $values(...values: IProductInsert[]): postgres.Helper<IProductInsert[], []>;
   $set(value: IProductUpdate): postgres.Helper<IProductUpdate, []>;
}

export function newProduct(sql: postgres.Sql): IProduct & postgres.Helper<"one_sql.product"> {
   const obj: IProduct = {
      $pk: sql("product_pk"),
      $table: "product",
      $all: sql([
         "product.created_at",
         "product.modified_at",
         "product.product_id",
         "product.price",
         "product.discount",
         "product.is_available",
         "product.is_published",
         "product.label",
      ]),
      $values(...values: IProductInsert[]) {
         return sql<IProductInsert[], []>(values);
      },

      $set(value: IProductUpdate) {
         return sql<IProductUpdate, []>(value);
      },

      /**
       * created_at timestamptz default now()
       */
      createdAt: sql("product.created_at"),

      /**
       * modified_at timestamptz default now()
       */
      modifiedAt: sql("product.modified_at"),

      /**
       * product_id uuid default gen_random_uuid()
       */
      productId: sql("product.product_id"),

      /**
       * price numeric
       */
      price: sql("product.price"),

      /**
       * discount numeric
       */
      discount: sql("product.discount"),

      /**
       * is_available bool default true
       */
      isAvailable: sql("product.is_available"),

      /**
       * is_published bool default false
       */
      isPublished: sql("product.is_published"),

      /**
       * label varchar
       */
      label: sql("product.label"),
   };
   const from = sql("one_sql.product");
   return Object.assign(from, obj);
}

export type IProductInsert = {
   createdAt?: Date;
   modifiedAt?: Date;
   productId?: string;
   price: string;
   discount?: string | null;
   isAvailable?: boolean;
   isPublished?: boolean;
   label: string;
};

export type IProductUpdate = Partial<IProductInsert>;

export type IProductSelect = {
   readonly createdAt: Date;
   readonly modifiedAt: Date;
   readonly productId: string;
   readonly price: string;
   readonly discount: string | null;
   readonly isAvailable: boolean;
   readonly isPublished: boolean;
   readonly label: string;
};

export type IProductJson = lib.JsonRow<IProductSelect>;
