// File generated by pg-typecraft. Do not edit.
import postgres from "postgres";
import * as lib from "./pg-typed.js";
 
import * as udt from "./one_sql-enums.js";

export interface IAccount {
   $pk: postgres.Helper<"account_pk">, 
   $table: "account",
   $all: postgres.Helper<["account.status", "account.account_id", "account.created_at", "account.modified_at", "account.email", "account.first_name", "account.last_name", "account.notes"]>,

   /**
    * status account_status default 'created'::one_sql.account_status
   */
   status: postgres.Helper<"account.status">,

   /**
    * account_id uuid default gen_random_uuid()
   */
   accountId: postgres.Helper<"account.account_id">,

   /**
    * created_at timestamptz default now()
   */
   createdAt: postgres.Helper<"account.created_at">,

   /**
    * modified_at timestamptz default now()
   */
   modifiedAt: postgres.Helper<"account.modified_at">,

   /**
    * email varchar
   */
   email: postgres.Helper<"account.email">,

   /**
    * first_name varchar
   */
   firstName: postgres.Helper<"account.first_name">,

   /**
    * last_name varchar
   */
   lastName: postgres.Helper<"account.last_name">,

   /**
    * notes text
   */
   notes: postgres.Helper<"account.notes">,
   $values(...values: IAccountInsert[]): postgres.Helper<IAccountInsert[], []>
   $set(value: IAccountUpdate): postgres.Helper<IAccountUpdate, []>
}

export function newAccount(sql: postgres.Sql): IAccount & postgres.Helper<"one_sql.account"> {
   const obj: IAccount = {
      $pk: sql("account_pk"), 
      $table: "account",
      $all: sql(["account.status", "account.account_id", "account.created_at", "account.modified_at", "account.email", "account.first_name", "account.last_name", "account.notes"]),
      $values(...values: IAccountInsert[]){
         return sql<IAccountInsert[], []>(values);
      },

      $set(value: IAccountUpdate){
         return sql<IAccountUpdate, []>(value);
      },


      /**
       * status account_status default 'created'::one_sql.account_status
      */
      status: sql("account.status"),

      /**
       * account_id uuid default gen_random_uuid()
      */
      accountId: sql("account.account_id"),

      /**
       * created_at timestamptz default now()
      */
      createdAt: sql("account.created_at"),

      /**
       * modified_at timestamptz default now()
      */
      modifiedAt: sql("account.modified_at"),

      /**
       * email varchar
      */
      email: sql("account.email"),

      /**
       * first_name varchar
      */
      firstName: sql("account.first_name"),

      /**
       * last_name varchar
      */
      lastName: sql("account.last_name"),

      /**
       * notes text
      */
      notes: sql("account.notes"),
   };
   const from = sql("one_sql.account");
   return Object.assign(from, obj);
}


export type IAccountInsert = {
   status?: udt.AccountStatusUdt;
   accountId?: string;
   createdAt?: Date;
   modifiedAt?: Date;
   email: string;
   firstName: string;
   lastName: string;
   notes?: string | null;
}

export type IAccountUpdate = Partial<IAccountInsert>;

export type IAccountSelect = {
   readonly status: udt.AccountStatusUdt
   readonly accountId: string
   readonly createdAt: Date
   readonly modifiedAt: Date
   readonly email: string
   readonly firstName: string
   readonly lastName: string
   readonly notes: string | null
}

export type IAccountJson = lib.JsonRow<IAccountSelect>;